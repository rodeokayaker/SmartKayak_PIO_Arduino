/**
 * @file IMUSensor_BNO085.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IMU –º–æ–¥—É–ª–µ–º BNO085
 * 
 * @author Ivan Rybnikov
 * @copyright Copyright (c) 2024
 */

#include "IMUSensor_BNO085.h"

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
static IMUSensor_BNO085* instanceForISR = nullptr;

IMUSensor_BNO085::IMUSensor_BNO085(const char* prefsName, uint8_t i2cAddr, 
                                   int8_t interruptPin, Stream* logStream)
    : prefsName(prefsName),
      i2cAddress(i2cAddr),
      interruptPin(interruptPin),
      logStream(logStream ? logStream : &Serial),
      imuFrequency(BNO085_IMU_DEFAULT_FREQUENCY),
      magFrequency(BNO085_MAG_DEFAULT_FREQUENCY),
      sensorReady(false),
      calibrationSaved(false),
      lastSavedCalibrationTime(0),
      lastCalibrationCheck(0),
      calibrationCounter(0),
      quaternionCount(0),
      accelCount(0),
      gyroCount(0),
      magCount(0)
{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
    memset(&currentData, 0, sizeof(IMUData));
    currentData.q0 = 1.0f;
    memset(&currentOrientation, 0, sizeof(OrientationData));
    currentOrientation.q0 = 1.0f;
    memset(&calibData, 0, sizeof(IMUCalibData));
    memset(&savedCalibration, 0, sizeof(BNO085CalibrationData));
    memset(&currentCalibration, 0, sizeof(BNO085CalibrationData));
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    for(int i = 0; i < 3; i++) {
        calibData.accelScale[i] = 1.0f;
        calibData.gyroScale[i] = 1.0f;
        calibData.magScale[i] = 1.0f;
        calibData.accelOffset[i] = 0;
        calibData.gyroOffset[i] = 0;
        calibData.magOffset[i] = 0.0f;
        calibData.magSI[i] = 0.0f;
    }
    
    instanceForISR = this;
}

bool IMUSensor_BNO085::begin(uint16_t imuFreq, uint16_t magFreq) {
    imuFrequency = imuFreq;
    magFrequency = magFreq;
    
    logStream->println("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BNO085...");
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ I2C
    Wire.begin();
    Wire.setClock(100000); // –ù–∞—á–∏–Ω–∞–µ–º —Å 100 –∫–ì—Ü –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    
    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    logStream->println("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤...");
    bool deviceFound = false;
    uint8_t bno085Address = 0;
    
    for (uint8_t address = 1; address < 127; address++) {
        Wire.beginTransmission(address);
        if (Wire.endTransmission() == 0) {
            logStream->printf("I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: 0x%02X\n", address);
            if (address == 0x4A || address == 0x4B) {
                bno085Address = address;
                deviceFound = true;
                logStream->printf("‚úì BNO085 –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: 0x%02X\n", address);
                i2cAddress = address;
            }
        }
    }
    
    if (!deviceFound) {
        logStream->println("‚ùå BNO085 –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º (0x4A, 0x4B)");
        return false;
    }
    

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞
    logStream->println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BNO085...");
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    bool initSuccess = false;
    
    // –°–ø–æ—Å–æ–± 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if (myIMU.begin() == true) {
        initSuccess = true;
        logStream->println("‚úì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (—Å–ø–æ—Å–æ–± 1)");
    } else {
        logStream->println("–°–ø–æ—Å–æ–± 1 –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å–ø–æ—Å–æ–± 2...");
        
        // –°–ø–æ—Å–æ–± 2: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞
        if (myIMU.begin(bno085Address) == true) {
            initSuccess = true;
            logStream->println("‚úì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (—Å–ø–æ—Å–æ–± 2 —Å –∞–¥—Ä–µ—Å–æ–º)");
        } else {
            logStream->println("–°–ø–æ—Å–æ–± 2 –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å–ø–æ—Å–æ–± 3...");
            
            // –°–ø–æ—Å–æ–± 3: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Wire –æ–±—ä–µ–∫—Ç–æ–º
            if (myIMU.begin(bno085Address, Wire) == true) {
                initSuccess = true;
                logStream->println("‚úì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (—Å–ø–æ—Å–æ–± 3 —Å Wire)");
            }
        }
    }
    
    if (!initSuccess) {
        logStream->println("‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å!");
        return false;
    }
    
    logStream->println("‚úÖ BNO085 –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É I2C –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    Wire.setClock(400000); // 400 –∫–ì—Ü
    logStream->println("I2C —á–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 400 –∫–ì—Ü");
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–∞—Ç—á–∏–∫–∞
    setReports();
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
    if (readCalibrationData()) {
        logStream->printf("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—Ç–æ—á–Ω–æ—Å—Ç—å: %.4f —Ä–∞–¥)\n", 
                         savedCalibration.quatAccuracy);
    } else {
        logStream->println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...");
        logStream->println("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:");
        logStream->println("1. –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ –¥–∞—Ç—á–∏–∫ –≤–æ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö");
        logStream->println("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≤–æ—Å—å–º–µ—Ä–∫–µ (–¥–ª—è –º–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä–∞)");
        logStream->println("3. –î–µ—Ä–∂–∏—Ç–µ –¥–∞—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥");
        logStream->println("4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É");
        logStream->println("5. –¶–µ–ª—å: —Ç–æ—á–Ω–æ—Å—Ç—å < 0.05 —Ä–∞–¥ (2.9¬∞)");
    }
    
    logStream->println("–ú—è–≥–∫–∏–π —Å–±—Ä–æ—Å...");
//    myIMU.softReset(); // –°–±—Ä–æ—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    delay(100);
    
    sensorReady = true;
    return true;
}

void IMUSensor_BNO085::setReports() {
    logStream->println("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ 100 –ì—Ü...");
    
    uint16_t interval = 10; // 100 –ì—Ü = 10 –º—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª
    
    // –í–∫–ª—é—á–∞–µ–º –∫–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω –Ω–∞ —Ç–æ—á–Ω–æ 100 –ì—Ü (10 –º—Å)
    if (myIMU.enableRotationVector(interval) == true) {
        logStream->println("‚úÖ –ö–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω –≤–∫–ª—é—á–µ–Ω: 100 –ì—Ü (—Ä–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏)");
    } else {
        logStream->println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∫–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω –Ω–∞ 100 –ì—Ü");
        return;
    }
    
    // –í–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–ª–∏—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    // –í–∫–ª—é—á–∞–µ–º –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–π –≥–∏—Ä–æ—Å–∫–æ–ø (100 –ì—Ü)
    if (myIMU.enableGyro(interval) == true) {
        logStream->println("‚úÖ –ì–∏—Ä–æ—Å–∫–æ–ø –≤–∫–ª—é—á–µ–Ω: 100 –ì—Ü");
    } else {
        logStream->println("‚ö†Ô∏è  –ì–∏—Ä–æ—Å–∫–æ–ø –Ω–µ –≤–∫–ª—é—á–µ–Ω");
    }
    
    // –í–∫–ª—é—á–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä (100 –ì—Ü)
    if (myIMU.enableAccelerometer(interval) == true) {
        logStream->println("‚úÖ –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä –≤–∫–ª—é—á–µ–Ω: 100 –ì—Ü");
    } else {
        logStream->println("‚ö†Ô∏è  –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä –Ω–µ –≤–∫–ª—é—á–µ–Ω");
    }
    
    // –í–∫–ª—é—á–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä (100 –ì—Ü)
    if (myIMU.enableMagnetometer(interval) == true) {
        logStream->println("‚úÖ –ú–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä –≤–∫–ª—é—á–µ–Ω: 100 –ì—Ü");
    } else {
        logStream->println("‚ö†Ô∏è  –ú–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä –Ω–µ –≤–∫–ª—é—á–µ–Ω");
    }
    
    // –í–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å)
    if (myIMU.enableStabilityClassifier(100) == true) {
        logStream->println("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω: 10 –ì—Ü");
    } else {
        logStream->println("‚ö†Ô∏è  –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω");
    }
    
    logStream->println("üîß –†–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
}



IMUData IMUSensor_BNO085::readData() {
    if (!sensorReady) {
        return currentData;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (myIMU.getSensorEvent() == true) {
        uint8_t sensorID = myIMU.getSensorEventID();
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω –∏ –≤—Å–µ —Å–µ–Ω—Å–æ—Ä—ã (100 –ì—Ü)
        if (sensorID == SENSOR_REPORTID_ROTATION_VECTOR) {
            // –ö–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω
            currentData.q1 = myIMU.getQuatI();
            currentData.q2 = myIMU.getQuatJ();
            currentData.q3 = myIMU.getQuatK();
            currentData.q0 = myIMU.getQuatReal();
            
            // –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä (–º/—Å¬≤)
            currentData.ax = myIMU.getAccelX();
            currentData.ay = myIMU.getAccelY();
            currentData.az = myIMU.getAccelZ();
            
            // –ì–∏—Ä–æ—Å–∫–æ–ø (—Ä–∞–¥/—Å) 
            currentData.gx = myIMU.getGyroX();
            currentData.gy = myIMU.getGyroY();
            currentData.gz = myIMU.getGyroZ();
            
            // –ú–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä (–º–∫–¢–ª)
            currentData.mx = myIMU.getMagX();
            currentData.my = myIMU.getMagY();
            currentData.mz = myIMU.getMagZ();
            
            // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            currentData.mag_x = (int16_t)currentData.mx;
            currentData.mag_y = (int16_t)currentData.my;
            currentData.mag_z = (int16_t)currentData.mz;
            
            currentData.timestamp = millis();
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            quaternionCount++;
            accelCount++;
            gyroCount++;
            magCount++;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            checkAndSaveCalibration();
        }
    }
    
    return currentData;
}

IMUData IMUSensor_BNO085::getData() {
    return currentData;
}

OrientationData IMUSensor_BNO085::updateOrientation() {
    currentOrientation.q0 = currentData.q0;
    currentOrientation.q1 = currentData.q1;
    currentOrientation.q2 = currentData.q2;
    currentOrientation.q3 = currentData.q3;
    currentOrientation.timestamp = millis();
    
    return currentOrientation;
}

OrientationData IMUSensor_BNO085::getOrientation() {
    return currentOrientation;
}

void IMUSensor_BNO085::checkAndSaveCalibration() {
    if (millis() - lastCalibrationCheck < BNO085_CALIBRATION_CHECK_INTERVAL) {
        return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    }
    
    lastCalibrationCheck = millis();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∫–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω–∞
    float quatAccuracy = myIMU.getQuatRadianAccuracy();
    uint8_t qualityLevel = evaluateCalibrationQuality(quatAccuracy);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
    currentCalibration.quatAccuracy = quatAccuracy;
    currentCalibration.qualityLevel = qualityLevel;
    currentCalibration.timestamp = millis();
    currentCalibration.isValid = true;
    currentCalibration.measurementCount++;
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
//    logStream->printf("üìä –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: —É—Ä–æ–≤–µ–Ω—å %d (—Ç–æ—á–Ω–æ—Å—Ç—å: %.4f —Ä–∞–¥)\n", 
//                     qualityLevel, quatAccuracy);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
    bool shouldSave = false;
    
    if (!calibrationSaved) {
        // –ü–µ—Ä–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —Ç—Ä–µ–±—É–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if (qualityLevel >= 2) {
            calibrationCounter++;
            logStream->printf("  ‚ú® –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (%d/3)\n", calibrationCounter);
            
            if (calibrationCounter >= 3) {
                shouldSave = true;
                logStream->println("üéâ –ü–ï–†–í–ê–Ø –ö–ê–õ–ò–ë–†–û–í–ö–ê –î–û–°–¢–ò–ì–ù–£–¢–ê! –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...");
            }
        } else {
            calibrationCounter = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ —É–ø–∞–ª–æ
        }
    } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        if (hasImprovedCalibration()) {
            shouldSave = true;
            logStream->println("üåü –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–ê–õ–ò–ë–†–û–í–ö–ê! –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...");
        }
    }
    
    if (shouldSave) {
        saveCalibrationData();
        calibrationSaved = true;
        calibrationCounter = 0;
    }
}

uint8_t IMUSensor_BNO085::evaluateCalibrationQuality(float accuracy) {
    if (accuracy < 0.05) return 3;        // –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è
    else if (accuracy < 0.1) return 2;    // –•–æ—Ä–æ—à–∞—è
    else if (accuracy < 0.2) return 1;    // –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è
    else return 0;                        // –ü–ª–æ—Ö–∞—è
}

bool IMUSensor_BNO085::hasImprovedCalibration() {
    if (!savedCalibration.isValid) return false;
    
    // –°—á–∏—Ç–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ç–∞–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ
    float improvement = savedCalibration.quatAccuracy - currentCalibration.quatAccuracy;
    return (improvement > 0.01); // –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ 0.01 —Ä–∞–¥ –∏–ª–∏ –±–æ–ª—å—à–µ
}

bool IMUSensor_BNO085::readCalibrationData() {
    Preferences prefs;
    if (!prefs.begin(prefsName.c_str(), true)) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    size_t dataSize = prefs.getBytesLength("bno085_calib");
    if (dataSize != sizeof(BNO085CalibrationData)) {
        prefs.end();
        return false;
    }
    
    // –ß–∏—Ç–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BNO085
    size_t readSize = prefs.getBytes("bno085_calib", &savedCalibration, sizeof(BNO085CalibrationData));
    prefs.end();
    
    bool success = (readSize == sizeof(BNO085CalibrationData) && savedCalibration.isValid);
    
    if (success) {
        calibrationSaved = true;
        logStream->printf("–ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: —Ç–æ—á–Ω–æ—Å—Ç—å %.4f —Ä–∞–¥, —É—Ä–æ–≤–µ–Ω—å %d\n",
                         savedCalibration.quatAccuracy, savedCalibration.qualityLevel);
    }
    
    return success;
}

void IMUSensor_BNO085::saveCalibrationData() {
    Preferences prefs;
    if (!prefs.begin(prefsName.c_str(), false)) {
        logStream->println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è NVS –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
    savedCalibration = currentCalibration;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BNO085
    size_t written = prefs.putBytes("bno085_calib", &savedCalibration, sizeof(BNO085CalibrationData));
    prefs.end();
    
    if (written == sizeof(BNO085CalibrationData)) {
        logStream->printf("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–æ—á–Ω–æ—Å—Ç—å: %.4f —Ä–∞–¥, —É—Ä–æ–≤–µ–Ω—å: %d\n",
                         savedCalibration.quatAccuracy, savedCalibration.qualityLevel);
        lastSavedCalibrationTime = millis();
    } else {
        logStream->println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    }
}

void IMUSensor_BNO085::calibrate() {
    logStream->println("üîÑ BNO085 –∏–º–µ–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É");
    logStream->println("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏:");
    logStream->println("1. –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ –¥–∞—Ç—á–∏–∫ –≤–æ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö");
    logStream->println("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≤–æ—Å—å–º–µ—Ä–∫–µ (–¥–ª—è –º–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä–∞)");
    logStream->println("3. –î–µ—Ä–∂–∏—Ç–µ –¥–∞—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥");
    logStream->println("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ö–æ—Ä–æ—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏");
}

void IMUSensor_BNO085::calibrateCompass() {
    logStream->println("üß≤ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–æ–º–ø–∞—Å–∞ BNO085:");
    logStream->println("–ú–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–≥–∞–π—Ç–µ –¥–∞—Ç—á–∏–∫ –ø–æ –≤–æ—Å—å–º–µ—Ä–∫–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥");
    
    uint32_t startTime = millis();
    while (millis() - startTime < 30000) {
        readData();
        float accuracy = getQuaternionAccuracy();
        
        if ((millis() - startTime) % 5000 == 0) {
            logStream->printf("–¢–æ—á–Ω–æ—Å—Ç—å: %.4f —Ä–∞–¥\n", accuracy);
        }
        
        delay(100);
    }
    
    logStream->println("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–æ–º–ø–∞—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
}

bool IMUSensor_BNO085::isCalibrationValid() {
    return calibrationSaved && savedCalibration.isValid && (savedCalibration.qualityLevel >= 1);
}

bool IMUSensor_BNO085::isFullyCalibrated() {
    uint8_t quality = getCalibrationQuality();
    return (quality >= 3); // –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
}

void IMUSensor_BNO085::getCalibrationStatus(uint8_t* quality, float* accuracy) {
    if (quality) *quality = currentCalibration.qualityLevel;
    if (accuracy) *accuracy = currentCalibration.quatAccuracy;
}

float IMUSensor_BNO085::getQuaternionAccuracy() {
    return myIMU.getQuatRadianAccuracy();
}

uint8_t IMUSensor_BNO085::getCalibrationQuality() {
    float accuracy = getQuaternionAccuracy();
    return evaluateCalibrationQuality(accuracy);
}

void IMUSensor_BNO085::printCalibrationStatus() {
    uint8_t quality;
    float accuracy;
    getCalibrationStatus(&quality, &accuracy);
    
    logStream->printf("üìä –°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ BNO085:\n");
    logStream->printf("   –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: %d (0-3)\n", quality);
    logStream->printf("   –¢–æ—á–Ω–æ—Å—Ç—å –∫–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω–∞: %.4f —Ä–∞–¥\n", accuracy);
    logStream->printf("   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: %s\n", calibrationSaved ? "–î–∞" : "–ù–µ—Ç");
    
    switch(quality) {
        case 3: logStream->println("   üü¢ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å!"); break;
        case 2: logStream->println("   üü° –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"); break;
        case 1: logStream->println("   üü† –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å"); break;
        default: logStream->println("   üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞"); break;
    }
}


void IMUSensor_BNO085::printStatistics() {
    uint32_t uptime = millis();
    float uptimeSeconds = uptime / 1000.0f;
    
    logStream->printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BNO085 (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %.1f —Å–µ–∫):\n", uptimeSeconds);
    logStream->printf("   üîÑ –ö–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω: %lu –æ—Ç—Å—á–µ—Ç–æ–≤ (%.1f –ì—Ü)\n", 
                     quaternionCount, quaternionCount / uptimeSeconds);
    logStream->printf("   üìê –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä: %lu –æ—Ç—Å—á–µ—Ç–æ–≤ (%.1f –ì—Ü)\n", 
                     accelCount, accelCount / uptimeSeconds);
    logStream->printf("   üå™  –ì–∏—Ä–æ—Å–∫–æ–ø: %lu –æ—Ç—Å—á–µ—Ç–æ–≤ (%.1f –ì—Ü)\n", 
                     gyroCount, gyroCount / uptimeSeconds);
    logStream->printf("   üß≤ –ú–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä: %lu –æ—Ç—Å—á–µ—Ç–æ–≤ (%.1f –ì—Ü)\n", 
                     magCount, magCount / uptimeSeconds);
    
    uint8_t quality;
    float accuracy;
    getCalibrationStatus(&quality, &accuracy);
    logStream->printf("   üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: —É—Ä–æ–≤–µ–Ω—å %d, —Ç–æ—á–Ω–æ—Å—Ç—å %.4f —Ä–∞–¥\n", quality, accuracy);
    
    if (calibrationSaved) {
        logStream->printf("   üíæ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: %.1f —Å–µ–∫ –Ω–∞–∑–∞–¥\n", 
                         (millis() - lastSavedCalibrationTime) / 1000.0f);
    }
}

IMUCalibData IMUSensor_BNO085::getCalibrationData() {
    return calibData;
}

void IMUSensor_BNO085::setCalibrationData(const IMUCalibData calib, bool save) {
    calibData = calib;
    logStream->println("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)");
}

void IMUSensor_BNO085::softReset() {
    if (sensorReady) {
        myIMU.softReset();
        logStream->println("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω –º—è–≥–∫–∏–π —Å–±—Ä–æ—Å BNO085");
    }
}

bool IMUSensor_BNO085::isReady() {
    return sensorReady;
}


